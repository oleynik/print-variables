plugins {
	id 'java'
	id 'net.researchgate.release' version '2.8.1'
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	enabled = false
	manifest {
		attributes 'Main-Class': 'ua.infinity.experiments.environment.printvariables.PrintVariablesApplication'
	}
}

def createReleaseBranch(String releaseBranchName) {
	printf('Creating release branch %s', releaseBranchName)
	['sh', '-c', 'git branch ', releaseBranchName].execute().text.trim()
	['sh', '-c', 'git checkout ', releaseBranchName].execute().text.trim()
}

//tasks.register('createReleaseBranch') {
//	doLast {
//		createReleaseBranch('release/v' + extension.releaseVersion.get())
//	}
//}

release {
	tagTemplate = 'v${version}'
	preTagCommitMessage = '[Gradle Release Plugin] Prepare for release:'
	tagCommitMessage = '[Gradle Release Plugin] Release:'
	newVersionCommitMessage = '[Gradle Release Plugin] New SNAPSHOT version:'
	failOnCommitNeeded = false
	failOnPublishNeeded = false
}

beforeReleaseBuild.dependsOn createReleaseBranch(version.toString())